; 
; 
; RocksServer configuration file
; Config for RocksDB server RocksServer
; 
; Author: valmat <ufabiz@gmail.com>
; Github: https://github.com/valmat/rocksserver
; 
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                               ;
;                             Configs HTTP                                      ;
;                                                                               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; HTTP server host
; 0.0.0.0 - any host
; Default value: 127.0.0.1
;
; server_host = 


; HTTP server port
; Default value: 5577
;
; server_port = 


; HTTP server content_type
; Set the value to use for the Content-Type header
; Default value: text/plain; charset=UTF-8
;
; content_type = 


; Limitations for body size
; limit in bytes. 0 - unlimited
; Default value: 0
;
; max_body_size = 


; Limitations for headers size
; limit in bytes. 0 - unlimited
; Default value: 0
;
; max_headers_size = 


; Error level
; Possible values: debug | msg |  warn | error | fatal | none
; Default value: none
;
; log_level = 


; Error log file name
; Default value: /var/log/rocksserver/error.log
;
; error_log = 


; Set nofile soft limit
; This option sets the soft limit on the number of simultaneously opened files
; (including sockets, pipe, log files, etc).
; You can see your current soft limit by command `ulimit -Sn` and your hard limit by command `ulimit -Hn`
; The value of the soft of limit must not exceed the value of hard limit.
; If for some reason the server will take a lot of connections, the number of which exceeds nofile_limit, 
; then part of the connections will not be processed.
; Increase nofile_limit can solve the problem.
;
; 0 - default system value (usually 1024)
; Default value: 0
;
; nofile_limit = 




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                               ;
;                             Configs RocksDB                                   ;
;                                                                               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; RocksDB data base path
; Default value: /var/rocksserver/db
;
; db_path =

; If true, RocksDB will aggressively check consistency of the data.
; Also, if any of the  writes to the database fails (Put, Delete, Merge,
; Write), the database will switch to read-only mode and fail all other
; Write operations.
; In most cases you want this to be set to true.
;
; Default: true
; paranoid_checks = true


; Allow the OS to mmap file for reading sst tables. 
; (Turn on for In-memory db)
;
; Default: false
; allow_mmap_reads = 


; Allow the OS to mmap file for writing.
;
; Default: false
; allow_mmap_writes =


; Number of open files that can be used by the DB.  You may need to
; increase this if your database has a large working set. Value -1 means
; files opened are always kept open. You can estimate number of files based
; on target_file_size_base and target_file_size_multiplier for level-based
; compaction. For universal-style compaction, you can usually set it to -1.
; See: https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#general-options
;
; Default: -1
; max_open_files = 

; If max_open_files is -1, DB will open all files on DB::Open(). You can
; use this option to increase the number of threads used to open the files.
;
; Default: 16
; max_file_opening_threads = 

;
; Flushing options
;

; Amount of data to build up in memory (backed by an unsorted log on disk) 
; before converting to a sorted on-disk file.
; Larger values increase performance, especially during bulk loads.
; Up to max_write_buffer_number write buffers may be held in memory
; at the same time, so you may wish to adjust this parameter to control memory usage.
; Also, a larger write buffer will result in a longer recovery time
; the next time the database is opened.
; Default value is 4MB.
; See: https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#flushing-options
;
; Default: 4194304
; write_buffer_size = 


; The maximum number of write buffers that are built up in memory.
; The default and the minimum number is 2, so that when 1 write buffer
; is being flushed to storage, new writes can continue to the other write buffer.
; See: https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#flushing-options
;
; Default: 2
; max_write_buffer_number = 


; The minimum number of write buffers that will be merged together before writing to storage.
; If set to 1, then all write buffers are fushed to L0 as individual files and this increases
; read amplification because a get request has to check in all of these files. 
; Also, an in-memory merge may result in writing lesser data to storage 
; if there are duplicate records in each of these individual write buffers.
; See: https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#flushing-options
;
; Default: 1
; min_write_buffer_number_to_merge = 


; Approximate size of user data packed per block.  
; Note that the block size specified here corresponds to uncompressed data.
; The actual size of the unit read from disk may be smaller if compression is enabled.  
; This parameter can be changed dynamically.
; See: https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#suggestion-for-in-memory-block-table
; Default value is 4K
;
; Default: 4096
; block_size = 


; This specifies the absolute dir path for write-ahead logs (WAL).
; If it is empty, the log files will be in the same dir as data,
; dbname is used as the data dir by default
; If it is non empty, the log files will be in kept the specified dir.
; When destroying the db, all log files in wal_dir and the dir itself is deleted
; See: https://github.com/facebook/rocksdb/wiki/How-to-persist-in-memory-RocksDB-database%3F
; 
; Default: "" (empty)
; wal_dir = 


; The following two fields affect how archived logs will be deleted.
; 1. If both set to 0, logs will be deleted asap and will not get into the archive.
; 2. If WAL_ttl_seconds is 0 and WAL_size_limit_MB is not 0,
;    WAL files will be checked every 10 min and if total size is greater
;    then WAL_size_limit_MB, they will be deleted starting with the
;    earliest until size_limit is met. All empty files will be deleted.
; 3. If WAL_ttl_seconds is not 0 and WAL_size_limit_MB is 0, then
;    WAL files will be checked every WAL_ttl_secondsi / 2 and those that
;    are older than WAL_ttl_seconds will be deleted.
; 4. If both are not 0, WAL files will be checked every 10 min and both
;    checks will be performed with ttl being first.
; See: https://github.com/facebook/rocksdb/wiki/How-to-persist-in-memory-RocksDB-database%3F
;
; Both default: 0
; wal_ttl_seconds = 
; wal_size_limit_mb = 

; Once write-ahead logs exceed this size, we will start forcing the flush of
; column families whose memtables are backed by the oldest live WAL file
; (i.e. the ones that are causing all the space amplification). If set to 0
; (default), we will dynamically choose the WAL size limit to be
; [sum of all write_buffer_size * max_write_buffer_number] * 4
; This option takes effect only when there are more than one column family as
; otherwise the wal size is dictated by the write_buffer_size.
;
; Default: 0
; max_total_wal_size = 

; This specifies the info LOG dir.
; If it is empty, the log files will be in the same dir as data.
; If it is non empty, the log files will be in the specified dir,
; and the db data dir's absolute path will be used as the log file
; name's prefix.
; 
; Default: "" (empty)
; db_log_dir = 

; By default, writes to stable storage use fdatasync (on platforms
; where this function is available). If this option is true,
; fsync is used instead.
; fsync and fdatasync are equally safe for our purposes and fdatasync is
; faster, so it is rarely necessary to set this option. It is provided
; as a workaround for kernel/filesystem bugs, such as one that affected
; fdatasync with ext4 in kernel versions prior to 3.7.
; Default: false
; use_fsync = 

; Maximum number of concurrent background jobs (compactions and flushes).
; See https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide#parallelism-options
;
; Default: 2
; max_background_jobs = 

; This value represents the maximum number of threads that will
; concurrently perform a compaction job by breaking it into multiple,
; smaller ones that are run simultaneously.
;
; Default: 1 (i.e. no subcompactions)
; max_subcompactions = 

; Enable direct I/O mode for read/write
; they may or may not improve performance depending on the use case
;
; Files will be opened in "direct I/O" mode
; which means that data r/w from the disk will not be cached or
; buffered. The hardware buffer of the devices may however still
; be used. Memory mapped files are not impacted by these parameters.
; 
; Use O_DIRECT for user and compaction reads.
; When true, we also force new_table_reader_for_compaction_inputs to true.
;
; Default: false
; use_direct_reads = 

; Use O_DIRECT for writes in background flush and compactions.
; Default: false
; use_direct_io_flush_compaction = 

; if not zero, dump rocksdb.stats to LOG every stats_dump_period_sec
;
; Default: 600 (10 min)
; stats_dump_period_sec = 

; Important!
; If non-zero, we perform bigger reads when doing compaction. If you're
; running RocksDB on spinning disks, you should set this to at least 2MB.
; That way RocksDB's compaction is doing sequential instead of random reads.
;
; When non-zero, we also force new_table_reader_for_compaction_inputs to
; true.
;
; Default: 0
; compaction_readahead_size = 

; Allows OS to incrementally sync files to disk while they are being
; written, asynchronously, in the background. This operation can be used
; to smooth out write I/Os over time. Users shouldn't rely on it for
; persistency guarantee.
; Issue one request for every bytes_per_sync written. 0 turns it off.
;
; You may consider using rate_limiter to regulate write rate to device.
; When rate limiter is enabled, it automatically enables bytes_per_sync
; to 1MB.
;
; This option applies to table files
;
; Default: 0, (turned off)
; uint64_t bytes_per_sync = 

; Same as bytes_per_sync, but applies to WAL files
;
; Default: 0, (turned off)
; wal_bytes_per_sync = 

; By default, a single write thread queue is maintained. The thread gets
; to the head of the queue becomes write batch group leader and responsible
; for writing to WAL and memtable for the batch group.
;
; If enable_pipelined_write is true, separate write thread queue is
; maintained for WAL write and memtable write. A write thread first enter WAL
; writer queue and then memtable writer queue. Pending thread on the WAL
; writer queue thus only have to wait for previous writers to finish their
; WAL writing but not the memtable writing. Enabling the feature may improve
; write throughput and reduce latency of the prepare phase of two-phase
; commit.
;
; Default: false
; pipelined_write =

; If true, then DB::Open() will not update the statistics used to optimize
; compaction decision by loading table properties from many files.
; Turning off this feature will improve DBOpen time especially in
; disk environment.
;
; Default: false
; skip_stats_update_on_db_open = 

; The periodicity when obsolete files get deleted. 
; The default value is 6 hours.
; The files that get out of scope by compaction
; process will still get automatically delete on every compaction,
; regardless of this setting
; (in Seconds)
;
; Default: 21600 (6 * 60 * 60 == 6 hours)
; del_obsolete_files_period = 

;
; Configs backups RocksDB
;


; Is it DB backupable?
; If isbackupable = true, you'll can create backup via request
; POST /backup
;
; Default: true
; isbackupable = 


; RocksDB backup path
; The directory in which a backup will be saved
; Default value: /var/rocksserver/backup
;
; backup_path = 


; If share_table_files = true, backup will assume that table files with
; same name have the same contents. This enables incremental backups and
; avoids unnecessary data copies.
; If share_table_files == false, each backup will be on its own and will
; not share any data with other backups.
;
; Default: true
; share_table_files =

; If backup_sync = true, we can guarantee you'll get consistent backup even
; on a machine crash/reboot. Backup process is slower with sync enabled.
; If sync == false, we don't guarantee anything on machine reboot. However,
; chances are some of the backups are consistent.
;
; Default: true
; backup_sync =

; If true, it will delete whatever backups there are already
;
; Default: false
; backup_destroy_old =

; If false, we won't backup log files. This option can be useful for backing
; up in-memory databases where log file are persisted, but table files are in
; memory.
;
; Default: true
; backup_log_files =

; deletes old backups, keeping latest backups_to_keep alive
; If backups_to_keep = 0, no specified — will keep all backups
;
; Default: 0
; backups_to_keep =


; When flush_before_backup is true, BackupEngine will first issue a memtable flush and only then copy the DB files to the backup directory.
; Doing so will prevent log files from being copied to the backup directory (since flush will delete them).
; If flush_before_backup is false, backup will not issue flush before starting the backup.
; In that case, the backup will also include log files corresponding to live memtables.
; Backup will be consistent with current state of the database regardless of flush_before_backup parameter.
; See https://github.com/facebook/rocksdb/wiki/How-to-backup-RocksDB%3F
;
; Default: false
; flush_before_backup =

; How many background threads will copy files for CreateNewBackup() and RestoreDBFromBackup()
; 
; Default: 1
; backup_threads = 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                               ;
;                                    Etc                                        ;
;                                                                               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Path to RocksServer extentions directory
;
; Default: /usr/lib/rocksserver/plugins
; extdir = 


